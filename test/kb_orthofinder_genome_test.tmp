# -*- coding: utf-8 -*-
import unittest
import os  # noqa: F401
import json  # noqa: F401
import time
import requests
import shutil

from os import environ
try:
    from ConfigParser import ConfigParser  # py2
except:
    from configparser import ConfigParser  # py3

from pprint import pprint  # noqa: F401

from installed_clients.WorkspaceClient import Workspace as workspaceService
from installed_clients.GenomeFileUtilClient import GenomeFileUtil
from installed_clients.DataFileUtilClient import DataFileUtil
from kb_orthofinder.kb_orthofinderImpl import kb_orthofinder
from kb_orthofinder.kb_orthofinderServer import MethodContext
from kb_orthofinder.authclient import KBaseAuth as _KBaseAuth

class kb_orthofinderTest(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        token = environ.get('KB_AUTH_TOKEN', None)
        config_file = environ.get('KB_DEPLOYMENT_CONFIG', None)
        cls.cfg = {}
        config = ConfigParser()
        config.read(config_file)
        for nameval in config.items('kb_orthofinder'):
            cls.cfg[nameval[0]] = nameval[1]
        # Getting username from Auth profile for token
        authServiceUrl = cls.cfg['auth-service-url']
        auth_client = _KBaseAuth(authServiceUrl)
        user_id = auth_client.get_user(token)
        # WARNING: don't call any logging methods on the context object,
        # it'll result in a NoneType error
        cls.ctx = MethodContext(None)
        cls.ctx.update({'token': token,
                        'user_id': user_id,
                        'provenance': [
                            {'service': 'kb_orthofinder',
                             'method': 'annotate_plant_transcripts',
                             'method_params': []
                             }],
                        'authenticated': 1})
        cls.wsURL = cls.cfg['workspace-url']
        cls.wsClient = workspaceService(cls.wsURL)
        cls.serviceImpl = kb_orthofinder(cls.cfg)
        cls.scratch = cls.cfg['scratch']

        cls.skip_refdata = False
        cls.test_data = "OrthoFinder_Phytozome_Reference"
        
        if(cls.cfg['skip_refdata']=="1"):
            cls.skip_refdata = True
            cls.test_data = cls.cfg['test_data']
            
        cls.callback_url = os.environ['SDK_CALLBACK_URL']
        cls.gfu = GenomeFileUtil(cls.callback_url)
        cls.dfu = DataFileUtil(cls.callback_url)
        
        cls.genome = "Test_Genome"
        cls.prepare_data()

    @classmethod
    def tearDownClass(cls):
        if hasattr(cls, 'wsName'):
            cls.wsClient.delete_workspace({'workspace': cls.wsName})
            print('Test workspace was deleted')

    def getWsClient(self):
        return self.__class__.wsClient

    def getImpl(self):
        return self.__class__.serviceImpl

    def getContext(self):
        return self.__class__.ctx

    @classmethod
    def prepare_data(cls):

        if(cls.skip_refdata is False):
            cls.gff_filename = 'Test_v1.0.gene.gff3.gz'
            cls.gff_path = os.path.join(cls.scratch, cls.gff_filename)
            shutil.copy(os.path.join("/kb", "module", "data", cls.gff_filename), cls.gff_path)

            cls.fa_filename = 'Test_v1.0.fa.gz'
            cls.fa_path = os.path.join(cls.scratch, cls.fa_filename)
            shutil.copy(os.path.join("/kb", "module", "data", cls.fa_filename), cls.fa_path)

            cls.tr_filename = cls.test_data+'.tar.gz'
            cls.data_path = os.path.join(cls.scratch, cls.tr_filename)
        else:
            cls.data_path = os.path.join(cls.scratch, "../", "test_data", cls.test_data)

    # NOTE: According to Python unittest naming rules test method names should start from 'test'. # noqa
    def test_annotate_user_transcripts(self):

        # The commented out values are for testing a large and close relative
        input_ws = "Phytozome_Genomes"
        input_ws = "seaver:narrative_1538440679496"
        input_genome = "Hannuus_r1.2"
        input_genome = "Helianthus_annuus_RefSeq"
        input_ws = "Test"
        input_genome = "Cocos"

        ret = self.getImpl().annotate_plant_transcripts(self.getContext(), {'input_ws' : input_ws,
                                                                            'input_genome' : input_genome,
                                                                            'families_path' : self.data_path,
                                                                            'threshold' : 0.55})

        print("RESULT: ",ret[0])
        pass
